import java.text.SimpleDateFormat
import java.util.Date

/**
 * Project Plugins
 */
plugins {
    id 'java'
}

/**
 * Project Properties
 */
group = 'ortus.extension'

// Java Compilation Options
java.sourceCompatibility = JavaVersion.VERSION_1_8
java.targetCompatibility = JavaVersion.VERSION_1_8

/**
 * Repositories for dependencies in order
 */
repositories {
    mavenLocal()
	mavenCentral()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

/**
 * Project Dependencies
 */
dependencies {
	// Compile Time Only - Provided by Lucee at Runtime
	compileOnly 'org.lucee:lucee:5.4.1.8'
	// Runtime
    implementation 'org.hibernate:hibernate-core:5.6.15.Final'
    implementation 'org.hibernate:hibernate-ehcache:5.6.15.Final'
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'ch.qos.logback:logback-classic:1.3.8'
}

/**
 * Compile
 */
tasks.withType( JavaCompile ) {
    options.encoding = 'UTF-8'
	options.debug()
}

/**
 * Create shaded Jar from extension and dependencies
 */
jar {
    archiveFileName = "${project.property( 'jarName' )}.jar"
    destinationDirectory = file( 'build/libs' )
	from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree( it ) }
    }
}

/**
 * Create Lucee OSGI bundle
 */
task osgiBundle( type: Jar ) {
	dependsOn jar

    archiveFileName = "${project.property( 'extension.slug' )}-${project.property( 'extension.version' )}.jar"
    from( zipTree( "build/libs/${project.property( 'jarName' )}.jar" ) )

	def dateFormat = new SimpleDateFormat( "yyyyMMddHHmmss" )
	def builtDate = dateFormat.format( new Date() )

    manifest {
        attributes(
            'Bundle-Name': project.bundleHumanName,
            'Bundle-SymbolicName': project.bundlename,
            'Bundle-Description': project.bundleDescription,
            'Bundle-ManifestVersion': 2,
            'Bundle-Version': "${project.version}.${System.currentTimeMillis()}",
            'Built-Date': "${builtDate}"
        )
    }
}

/**
 * Copy runtime dependencies to build/runtime
 * Useful for testing and deebugging
 */
task getDeps( type: Copy ) {
  from sourceSets.main.runtimeClasspath
  into 'build/runtime/'
}